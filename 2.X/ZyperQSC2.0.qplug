-----------------------------------------------------------------
-- ZeeVee Zyper Management Platform Plugin for QSC Q-SYS
-- Contributions by Chowmain Software & Apps   http://www.chowmainsoft.com
-- Developed by Antony Torres, ZeeVee Integration Engineer
--
-- Revision Dated: 2024-April-24
-- Version Number: 2.0 build 2.0.0.3
--
-- Changelog:
-- 2024-APR-24 - Fixed bugs with UHD Temp and unknown devices
-- 2024-APR-08 - Exposed button for sending from console page for automation
-- 2024-APR-02 - 2.0 Beta 1
-----------------------------------------------------------------


---- QSYS Initialization ----


--==-- Plugin Info --==--




LOGO = {
	["IMAGE"] = "",
	["SIZE"] = {1024 / 5, 400 / 5}
}
PreviewImg = {
	["IMAGE"] = "",
	["SIZE"] = {1024 / 5, 320 / 5}
}

PluginInfo = {
	Name = "ZeeVee~ZyPerQSC Plugin",
	Version = "2.0",
	BuildVersion = "2.0.0.3",
	Id = "8101977b-91d9-4ef4-8c51-e57ca99c67eg",
	Description = "Plugin to interface with ZeeVee ZyPer Management Platform running Firmware Version 2.0 and above",
	IsManaged = true,
	Manufacturer = "ZeeVee",
	Model = "ZyPerMP",
	Type = Reflect and Reflect.Types.VideoSwitching or 0,
	devEnvironment = true
}

--==-- Global & Configurable Variables --==--

HBTime = 5
ipAddress = "172.16.5.111"

local pagenames = {
	"Information", -- ZMP Information
	"Sources", -- Encoders and Multiviews
	"Destinations", -- Decoders and Videowalls
	"Console"
}

Color = {
	ZEEVEE_PURPLE = {90, 56, 139},
	GrayTxt = {102, 102, 102},
	Yellow = {255,255,0},
	Orange = {255,145,0}

}

Status = {
	Green = {
		DrawChrome=false,IconData="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"
	},
	Yellow = {
		DrawChrome=false,IconData="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"
	},
	Orange = {
		DrawChrome=false,IconData=""
	},
	Red = {
		DrawChrome=false,IconData="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"
	}
}

Source = {
	Encoder = {},
	Multiview = {},
	pretty = {"HDMI","HDMI","HDMI","HDMI","HDMI","HDBT","HDBT","HDBT"},
	cmd = {"HDMI","HDBT"}
}

Destination = {
	Decoder = {},
	Videowall = {}
}

local imageUrl = "http://172.16.6.111/media/80:1f:12:4d:43:3c.jpeg"

--==-- Create GUI Elements --==--

-- Icon Design --
function GetColor(props)
	return Color.ZEEVEE_PURPLE
end

function GetPrettyName(props)
	return "ZyPerQSC\rv" .. PluginInfo.Version
end

-- Control Design --

function GetProperties() -- Elements within the device properties pannel
	return {
		{
			Name = "IPAddress",
			Type = "string",
			Value = "192.168.20.2"
		},
		{
			Name = "Port",
			Type = "integer",
			Min = 1,
			Max = 65535,
			Value = 22
		},
		{
			Name = "UserName",
			Type = "string",
			Value = "admin"
		},
		{
			Name = "Password",
			Type = "string",
			Value = "admin"
		},
		{
			Name = "Encoders",
			Type = "integer",
			Min = 1,
			Max = 100,
			Value = PluginInfo.devEnvironment == true and 4 or 1
		},
		{
			Name = "Decoders",
			Type = "integer",
			Min = 1,
			Max = 100,
			Value = PluginInfo.devEnvironment == true and 4 or 1
		},
		{
			Name = "Debug Print",
			Type = "enum",
			Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
			Value = PluginInfo.devEnvironment == true and "All" or "None"
		}
	}
end

-- Note, for item to exist, has to be in both controls and controllayout
function GetControls(props)
	ctrls = {}

	table.insert(ctrls, {Name = "Encoders", ControlType = "Textbox", IndicatorType = "Text", UserPin = true, PinStyle = "Output", Count = 1})
	table.insert(ctrls, {Name = "Decoders", ControlType = "Textbox", IndicatorType = "Text", UserPin = true, PinStyle = "Output", Count = 1})
	table.insert(ctrls, {Name = "IPAddress", ControlType = "Indicator", UserPin = true, PinStyle = "Output", Count = 1})
	table.insert(ctrls, {Name = "Port", ControlType = "Indicator", UserPin = true, PinStyle = "Output", Count = 1})
	table.insert(ctrls, {Name = "Status", ControlType = "Indicator", IndicatorType = Reflect and "StatusGP" or "Status", UserPin = true, PinStyle = "Output", Count = 1})
	table.insert(ctrls, {Name = "BtnJoinVideo", ControlType = "Button", ButtonType = "Trigger", Count = 1,  PinStyle = "Input", UserPin = true})
	table.insert(ctrls, {Name = "BtnJoinDigiAud", ControlType = "Button", ButtonType = "Trigger", Count = 1, PinStyle = "Input",  UserPin = true})
	table.insert(ctrls, {Name = "BtnJoinAnalAud", ControlType = "Button", ButtonType = "Trigger", Count = 1, PinStyle = "Input",  UserPin = true})
	table.insert(ctrls, {Name = "BtnJoinUSB", ControlType = "Button", ButtonType = "Trigger", Count = 1, PinStyle = "Input",  UserPin = true})
	
	
	table.insert(ctrls,{Name = "ENC_Selected",ControlType = "Text",UserPin = true,PinStyle = "Output",Count = 1 })
	table.insert(ctrls,{Name = "ENC_Connected",ControlType = "Button",ButtonType = "Trigger",UserPin = false,Count = props["Encoders"].Value})
	table.insert(ctrls,{Name = "ENC_Name",ControlType = "Text",UserPin = true,PinStyle = "Output",Count = props["Encoders"].Value})
	table.insert(ctrls,{Name = "ENC_Uptime",ControlType = "Text",UserPin = true,PinStyle = "Output",Count = props["Encoders"].Value})
	table.insert(ctrls,{Name = "ENC_Resolution",ControlType = "Text",UserPin = true,PinStyle = "Output",Count = props["Encoders"].Value})
	table.insert(ctrls,{Name = "ENC_Temp",ControlType = "Text",UserPin = true,PinStyle = "Output",Count = props["Encoders"].Value})
	table.insert(ctrls,{Name = "ENC_Data",ControlType = "Text",UserPin = true,PinStyle = "Output",Count = props["Encoders"].Value})
	table.insert(ctrls,{Name = "ENC_IPAddress",ControlType = "Text",UserPin = false,Count = props["Encoders"].Value})
	table.insert(ctrls,{Name = "ENC_Select",ControlType = "Button",ButtonType = "Trigger",UserPin = true,PinStyle = "Input" ,Count = props["Encoders"].Value})


	table.insert(ctrls,{Name = "DEC_Selected",ControlType = "Text",UserPin = true,PinStyle = "Output",Count = 1 })
	table.insert(ctrls,{Name = "DEC_Connected",ControlType = "Button",ButtonType = "Trigger",UserPin = false,Count = props["Decoders"].Value})
	table.insert(ctrls,{Name = "DEC_Name",ControlType = "Text",UserPin = true,PinStyle = "Output",Count = props["Decoders"].Value})
	table.insert(ctrls,{Name = "DEC_Uptime",ControlType = "Text",UserPin = true,PinStyle = "Output",Count = props["Decoders"].Value})
	table.insert(ctrls,{Name = "DEC_Video_SRC",ControlType = "Text",UserPin = true,PinStyle = "Output",Count = props["Decoders"].Value})
	table.insert(ctrls,{Name = "DEC_Audio_SRC",ControlType = "Text",UserPin = true,PinStyle = "Output",Count = props["Decoders"].Value})
	table.insert(ctrls,{Name = "DEC_Audio_Type",ControlType = "Text",UserPin = true,PinStyle = "Output",Count = props["Decoders"].Value})
	table.insert(ctrls,{Name = "DEC_Temp",ControlType = "Text",UserPin = true,PinStyle = "Output",Count = props["Decoders"].Value})
	table.insert(ctrls,{Name = "DEC_IPAddress",ControlType = "Text",UserPin = false,Count = props["Decoders"].Value})
	table.insert(ctrls,{Name = "DEC_Select",ControlType = "Button",ButtonType = "Trigger",UserPin = true,PinStyle = "Input" ,Count = props["Decoders"].Value})


	table.insert(ctrls, {Name = "Output", ControlType = "Text", TextBoxType = "ListBox", UserPin = true, PinStyle = "Output", Count = 1})
	table.insert(ctrls, {Name = "Command", ControlType = "Text", UserPin = true, PinStyle = "Input", Count = 1})
	table.insert(ctrls, {Name = "BtnCommand", ControlType = "Button", ButtonType = "Trigger", Count = 1, UserPin = true, PinStyle = "Input"})

	return ctrls
end
function GetPages()
	pages = {}
	for ix, name in ipairs(pagenames) do
		table.insert(pages, {name = pagenames[ix]})
	end
	return pages
end

function GetControlLayout(props)
	local layout, graphics = {}, {}
	local CurrentPage = pagenames[props["page_index"].Value]


	--== Global Page Stuff ==--
	table.insert(graphics, {Type = "GroupBox", Text = "Commands", Color = Color.GrayTxt, HTextAlign = "Left", TextSize = 14, IsBold = true, Fill = {255, 255, 255}, CornerRadius = 8, StrokeWidth = 2, StrokeColor = Color.ZEEVEE_PURPLE, Position = {0, 10}, Size = {250, 100}})
	table.insert(graphics, {Type = "Image", Image = LOGO.IMAGE, Size = LOGO.SIZE, Position = {275, 20}})
	
	local GlobalLabels = {
		Text = {"Encoder", "Decoder"}, 
		Pos = {	X = {10, 130}, 
				Y = {30, 30}}, 
		Size = {X = {70, 70}, 
				Y = {18, 18}}}

	for i = 1, #GlobalLabels.Pos.X do
		table.insert(graphics, {Type = "Text", Text = GlobalLabels.Text[i], Color = Color.GrayTxt, HTextAlign = "Left", Position = {GlobalLabels.Pos.X[i], GlobalLabels.Pos.Y[i]}, Size = {GlobalLabels.Size.X[i], GlobalLabels.Size.Y[i]}})
	end
	
	layout["ENC_Selected"] = {PrettyName = "Selected Encoder", Style = "Text", Position = {10, 45}, Size = {110, 16}, TextFontSize = 12}
	layout["DEC_Selected"] = {PrettyName = "Selected Decoder", Style = "Text", Position = {130, 45}, Size = {110, 16}, TextFontSize = 12}

    table.insert(graphics,{Type="Header",Text="Connection Options",FontSize=12,Position={10,69},Size={230,6}})

	layout["BtnJoinVideo"] = {PrettyName = "Join Video", Legend = "Video", Style = "Button", Position = {10, 80}, Size = {55, 24}}
	layout["BtnJoinUSB"] = {PrettyName = "Join USB", Legend = "USB", Style = "USB", Position = {65, 80}, Size = {55, 24}}
	layout["BtnJoinDigiAud"] = {PrettyName = "Join Digital Audio", Legend = "Digital", Style = "Button", Position = {125, 80}, Size = {55, 24}}
	layout["BtnJoinAnalAud"] = {PrettyName = "Join Analog Audio", Legend = "Analog", Style = "Button", Position = {185, 80}, Size = {55, 24}}
	
	
	--== Info Page GUI ==--
	if (CurrentPage == "Information") then
		
		table.insert(graphics, {Type = "GroupBox", Fill = {255, 255, 255}, Text = "ZyPer Management Platform", Color = Color.GrayTxt, HTextAlign = "Left", TextSize = 14, IsBold = true, CornerRadius = 8,StrokeWidth = 2, StrokeColor = Color.ZEEVEE_PURPLE, Position = {0, 120}, Size = {470, 200}})
		
		local Labels = {
			Text = {"IP Address", "Port", "Reboot"}, 
			Pos = {	X = {0, 20, 195}, 
					Y = {150, 170, 123}}, 
			Size = {X = {70, 50, 50}, 
					Y = {18, 18, 18}}}
	
		for i = 1, #Labels.Pos.X do
			table.insert(graphics, {Type = "Text", Text = Labels.Text[i], Color = Color.GrayTxt, HTextAlign = "Right", Position = {Labels.Pos.X[i], Labels.Pos.Y[i]}, Size = {Labels.Size.X[i], Labels.Size.Y[i]}})
		end

		layout["IPAddress"] = {PrettyName = "IP Address", Style = "Text", Position = {80, 150}, Size = {94, 16}, TextFontSize = 12}
		layout["Port"] = {PrettyName = "Port", Style = "Text", Position = {80, 170}, Size = {94, 16}, TextFontSize = 12}

		table.insert(graphics,{Type="Header",Text="Status",FontSize=12,Position={10,235},Size={450,6}})

		layout["Status"] = {PrettyName = "Status", Style = "Text", Position = {10, 250}, Size = {450, 58}, TextFontSize = 12}
		
	
	--== Encoder Page GUI ==--
	elseif (CurrentPage == "Sources") then

		table.insert(graphics, {Type = "GroupBox", Fill = {255, 255, 255}, Text = "Source Selection", Color = Color.GrayTxt, HTextAlign = "Left", TextSize = 14, IsBold = true, CornerRadius = 8, StrokeColor = Color.ZEEVEE_PURPLE, StrokeWidth = 2, Position = {0, 120}, Size = {555, 50 + (20*props["Encoders"].Value) }})
	
		local SourceLabels = {
			Text = {"Boop","Name","Resolution","Uptime","°C","IP Address", "Data"}, 
			Pos = {	X = {35,70, 185, 275, 370, 405, 490}, 
					Y = {145,145,145,145,145,145,145}}, 
			Size = {X = {90,90, 90, 90, 90, 90, 90}, 
					Y = {18,18, 18, 18, 18, 18, 18}}}	
		
		for i = 1, #SourceLabels.Pos.X do
			table.insert(graphics, {Type = "Text", Text = SourceLabels.Text[i], Color = Color.GrayTxt, HTextAlign = "Left", Position = {SourceLabels.Pos.X[i], SourceLabels.Pos.Y[i]}, Size = {SourceLabels.Size.X[i], SourceLabels.Size.Y[i]}})
		end

		for encoderIndex = 1, props["Encoders"].Value do -- Builds each row per number configured into module properties

			--layout["ENC_Connected " .. encoderIndex] = {PrettyName = string.format("Encoder %i~Source Connected", encoderIndex), Style = "Indicator", Position = {14, 140 + (encoderIndex * 20)}, Size = {16, 16}}
			layout["ENC_Connected " .. encoderIndex] = {PrettyName = string.format("Encoder %i~Source Connected", encoderIndex), Style = "Button", Position = {14, 140 + (encoderIndex * 20)}, Size = {16, 16}}
			layout["ENC_Select " .. encoderIndex] = {PrettyName = string.format("Encoder %i~Select ", encoderIndex), Style = "Button", ButtonStyle = "Trigger", IsBold = true, Position = {35, 140 + (encoderIndex * 20)}, Size = {30, 16}, Radius = 1, Margin = 1}
			layout["ENC_Name " .. encoderIndex] = {PrettyName = string.format("Encoder %i~Name", encoderIndex), Style = "Text", HTextAlign = "Left", Position = {70, 140 + (encoderIndex * 20)}, Size = {110, 16}}
			layout["ENC_Resolution " .. encoderIndex] = {PrettyName = string.format("Encoder %i~Resolution", encoderIndex), Style = "Text", HTextAlign = "Left", Position = {185, 140 + (encoderIndex * 20)}, Size = {85, 16}}
			layout["ENC_Uptime " .. encoderIndex] = {PrettyName = string.format("Encoder %i~Uptime", encoderIndex), Style = "Text", HTextAlign = "Left", Position = {275, 140 + (encoderIndex * 20)}, Size = {90, 16}}
			layout["ENC_Temp " .. encoderIndex] = {PrettyName = string.format("Encoder %i~Temperature", encoderIndex), Style = "Text", HTextAlign = "Left", Position = {370, 140 + (encoderIndex * 20)}, Size = {30, 16}}
			layout["ENC_IPAddress " .. encoderIndex] = {PrettyName = string.format("Encoder %i~IP Address", encoderIndex), Style = "Text", HTextAlign = "Left", Position = {405, 140 + (encoderIndex * 20)}, Size = {80, 16}}
			layout["ENC_Data " .. encoderIndex] = {PrettyName = string.format("Encoder %i~Datarate", encoderIndex), Style = "Text", HTextAlign = "Left", Position = {490, 140 + (encoderIndex * 20)}, Size = {55, 16}}

		end
			
	

	--== Decoder Page GUI ==--
	elseif (CurrentPage == "Destinations") then
		
		table.insert(graphics, {Type = "GroupBox", Fill = {255, 255, 255}, Text = "Destination Selection", Color = Color.GrayTxt, HTextAlign = "Left", TextSize = 14, IsBold = true, CornerRadius = 8, StrokeColor = Color.ZEEVEE_PURPLE, StrokeWidth = 2, Position = {0, 120}, Size = {695, 50 + (20*props["Decoders"].Value) }})
	
		local SourceLabels = {
			Text = {"Boop","Name","Video Encoder","Audio Encoder","Audio Mode","Uptime","°C","IP Address"}, 
			Pos = {	X = {35,70,185,300,415,480,575,610},  
					Y = {145,145,145,145,145,145,145,145}}, 
			Size = {X = {90, 90, 90, 90, 90, 90, 90, 90}, 
					Y = {18, 18, 18, 18, 18, 18, 18, 18}}}	
				
		for i = 1, #SourceLabels.Pos.X do
			table.insert(graphics, {Type = "Text", Text = SourceLabels.Text[i], Color = Color.GrayTxt, HTextAlign = "Left", Position = {SourceLabels.Pos.X[i], SourceLabels.Pos.Y[i]}, Size = {SourceLabels.Size.X[i], SourceLabels.Size.Y[i]}})
		end

		for decoderIndex = 1, props["Decoders"].Value do
			layout["DEC_Connected " .. decoderIndex] = {PrettyName = string.format("Decoder %i~Source Connected", decoderIndex), Style = "Indicator", Position = {14, 140 + (decoderIndex * 20)}, Size = {16, 16}}
			layout["DEC_Select " .. decoderIndex] = {PrettyName = string.format("Decoder %i~Select ", decoderIndex), Style = "Button", ButtonStyle = "Trigger", IsBold = true, Position = {35, 140 + (decoderIndex * 20)}, Size = {30, 16}, Radius = 1, Margin = 1}
			layout["DEC_Name " .. decoderIndex] = {PrettyName = string.format("Decoder %i~Name", decoderIndex), Style = "Text", HTextAlign = "Left", Position = {70, 140 + (decoderIndex * 20)}, Size = {110, 16}}
			layout["DEC_Video_SRC " .. decoderIndex] = {PrettyName = string.format("Decoder %i~Video Encoder", decoderIndex), Style = "Text", HTextAlign = "Left", Position = {185, 140 + (decoderIndex * 20)}, Size = {110, 16}}
			layout["DEC_Audio_SRC " .. decoderIndex] = {PrettyName = string.format("Decoder %i~Audio Encoder", decoderIndex), Style = "Text", HTextAlign = "Left", Position = {300, 140 + (decoderIndex * 20)}, Size = {110, 16}}
			layout["DEC_Audio_Type " .. decoderIndex] = {PrettyName = string.format("Decoder %i~Audio Mode", decoderIndex), Style = "Text", HTextAlign = "Left", Position = {415, 140 + (decoderIndex * 20)}, Size = {60, 16}}
			layout["DEC_Uptime " .. decoderIndex] = {PrettyName = string.format("Decoder %i~Uptime", decoderIndex), Style = "Text", HTextAlign = "Left", Position = {480, 140 + (decoderIndex * 20)}, Size = {90, 16}}
			layout["DEC_Temp " .. decoderIndex] = {PrettyName = string.format("Decoder %i~Temperature", decoderIndex), Style = "Text", HTextAlign = "Left", Position = {575, 140 + (decoderIndex * 20)}, Size = {30, 16}}
			layout["DEC_IPAddress " .. decoderIndex] = {PrettyName = string.format("Decoder %i~IP Address", decoderIndex), Style = "Text", HTextAlign = "Left", Position = {610, 140 + (decoderIndex * 20)}, Size = {70, 16}}
		end
		
	--== Console Page GUI ==--
	elseif (CurrentPage == "Console") then
		table.insert(graphics, {Type = "GroupBox", Fill = {0, 0, 0}, Text = "Console", Color = Color.GrayTxt, HTextAlign = "Left", TextSize = 14, IsBold = true, CornerRadius = 8, StrokeColor = Color.ZEEVEE_PURPLE, StrokeWidth = 2, Position = {0, 120}, Size = {470, 500}})
		layout["Output"] = {PrettyName = "Output", Style = "ListBox",  Color = {0, 0, 0}, TextColor = {200,200,200}, HTextAlign = "Left", Position = {20, 155}, Size = {430, 410}, TextFontSize = 12}
		layout["Command"] = {PrettyName = "Raw Input", Style = "Text", Position = {20, 580}, Size = {365, 20}, TextFontSize = 12}
		layout["BtnCommand"] = {PrettyName = "Raw Send", Legend = "Send", Style = "Button", Position = {392, 578}, Size = {60, 24}}
	end
	

	return layout, graphics
end

--==-- QSC Things --==--

function GetWiring(props)
	local wiring = {}
	return wiring
end

function GetPins(props)
	local pins = {}
	return pins
end

function GetComponents(props)
end


--==-- Post loaded code --==--


if Controls then

	--== Required Modules ==--
	rapidjson = require("rapidjson")

	--== Control Aliases ==--
	port = Controls.Port
	ip = Controls.IPAddress
	output = Controls.Output
	command = Controls.Command
	status = Controls.Status
	encoder = Controls.ENC_Selected
	decoder = Controls.DEC_Selected

	--== Buttons ==-- 
	btnCommand = Controls.BtnCommand
	
	btnJoinVideo = Controls.BtnJoinVideo
	btnJoinUSB = Controls.BtnJoinUSB
	btnJoinAnalog = Controls.BtnJoinAnalAud
	btnJoinDigital = Controls.BtnJoinDigiAud


	--== Global Variables ==--
	endpoints = {}	
	ZyperMP = Ssh.New()
	lastChangeStatus = 0
	lastChangeConfig = 0

	--== Boolean Flags ==--
	ready = false


	--== Timers ==--
	
	StartupTimer = Timer.New()	
	StatusTimer = Timer.New()	
	ConfigTimer = Timer.New()
	ErrCorrectTimer = Timer.New()

	--== Control Event Handlers ==--

	function ControlSetup()		
		print("Adding in Event Handlers")

		-- Encoder Button Logic		
		for i=1,Properties["Encoders"].Value do
			Controls["ENC_Select"][i].EventHandler = function()
				encoder.String = Controls["ENC_Name"][i].String
			end
		end
			-- Decoder Button Logic		
		for i=1,Properties["Decoders"].Value do
			Controls["DEC_Select"][i].EventHandler = function()
				decoder.String = Controls["DEC_Name"][i].String
			end
		end
	end

	--== Receive Buffer Section ==--

	BufferTimer = Timer.New() 
	local buffer = ""  
	local lineHolder = {}


	ZyperMP.Data = function()
		local info = ZyperMP:ReadLine(TcpSocket.EOL.Any)
		while info do
			if info ~= "" then -- Discards empty responses
				-- Remove excessive whitespaces and leading spaces
				info = info:gsub("%s+", " "):gsub("^%s+", "")
				buffer = buffer .. info .. "&$&"
				BufferTimer:Start(0)
			end
			info = ZyperMP:ReadLine(TcpSocket.EOL.Any)
		end
	end

	deviceCapture = 0
	videoWalls = {}

	consolePrint = function(data)
		table.insert(lineHolder, data) -- if not device, send to console printout
		Controls['Output'].Choices = lineHolder
	end

	ParseResponse = function()
		while #buffer > 0 do
			-- Skip and delete empty lines
			buffer = buffer:gsub("^[%s\r\n]+", "")
	
			local start, finish, line = buffer:find("([^&$&]+)&$&")
	
			if start then
				if izitJSON(line) then
					local jsonData = rapidjson.decode(line)
					if ready then
						if jsonData.command:find("show device config all") then
							lastChangeConfig = jsonData.lastChangeIdMax
							processConfig(jsonData)
						elseif jsonData.command:find("show device status all") then
							lastChangeStatus = jsonData.lastChangeIdMax
							processStatus(jsonData)
						end
						
					else
						if jsonData.command:find("logging note QSC_Loaded") then
							ready = true
						else
							consolePrint(line)
							print("non-heartbeat: " .. line)
						end
					end
				else
					consolePrint(line)
				end
	
				buffer = buffer:sub(finish + 1)
			else
				break -- Exit the loop when line is nil
			end
		end
		BufferTimer:Stop()
	end
	
	--== JSON Handling ==--

	function jsonConsoleAdd(jsonString)
		local prettyData = rapidjson.encode(jsonString.text, {pretty=true})
		print(prettyData)
		table.insert(lineHolder,prettyData)	
		Controls['Output'].Choices = lineHolder	
	end


	function processConfig(jsonData)
		local newEncoders = {} -- Table to store names of new encoders
		local newDecoders = {} -- Table to store names of new decoders
		local newDeviceFound = false -- Flag to indicate if new devices were found
	
		for _, item in ipairs(jsonData.text) do
			local type = item.gen.type
			local name = item.gen.name
			local matchFound = false -- Flag to indicate if a match was found for the current item
						

--red, yellow (no hdmi), orange (decoder only, hdmi but no join or join but no stream), green (encoder has hdmi, decoder has hdmi and valid stream)


			if type == "encoder" then
				for i = 1, Properties["Encoders"].Value do
					if Controls["ENC_Name"][i].String == name then
						Controls["ENC_IPAddress"][i].String = " "..item.ip.address
						matchFound = true
						break -- Exit the inner loop if a match is found
					end
				end
				if not matchFound then
					newDeviceFound = true
					table.insert(newEncoders, name)
				end
			elseif type == "decoder" then
				for i = 1, Properties["Decoders"].Value do
					if Controls["DEC_Name"][i].String == name then
						Controls["DEC_IPAddress"][i].String = " "..item.ip.address		
						Controls["DEC_Audio_Type"][i].String = " "..item.audioOutSourceType.hdmiOutSourceType						
						matchFound = true
						break -- Exit the inner loop if a match is found
					end
				end
				if not matchFound then
					newDeviceFound = true
					table.insert(newDecoders, name)
				end
			end
		end
	
		if newDeviceFound then
			ProcessNewDevice(newEncoders, newDecoders)
		end
	end


	function processStatus(jsonData)
		local newEncoders = {} -- Table to store names of new encoders
		local newDecoders = {} -- Table to store names of new decoders
		local newDeviceFound = false -- Flag to indicate if new devices were found
	
		for _, item in ipairs(jsonData.text) do
			local type = item.gen.type
			local name = item.gen.name
			local matchFound = false -- Flag to indicate if a match was found for the current item
	
			if type == "encoder" then
				for i = 1, Properties["Encoders"].Value do
					if Controls["ENC_Name"][i].String == name then
						--print("isit:"..rapidjson.encode(item, {pretty=true}))

						local fps = item.hdmiInput.fps --Trims FPS to who numbe if integer, or 2 decimals if not
						local numericFps = tonumber(fps)
						if numericFps then
							if fps:sub(-4) == ".000" then
								fps = fps:sub(1, -5)
							else
								fps = string.format("%.2f", numericFps)
							end
						else
							fps = "0" 
						end

						if item.gen.state == "Up" then
							if item.hdmiInput.cableConnected == "connected" then							
								Controls["ENC_Connected"][i].Legend=rapidjson.encode(Status.Green)
							else
								Controls["ENC_Connected"][i].Legend=rapidjson.encode(Status.Yellow)
							end
						else
							Controls["ENC_Connected"][i].Legend=rapidjson.encode(Status.Red)
						end

						Controls["ENC_Resolution"][i].String = " "..item.hdmiInput.horizontalSize .. "x" .. item.hdmiInput.verticalSize .. " " .. fps .. "Hz"
						Controls["ENC_Uptime"][i].String = " "..item.gen.uptime

						local success, result = pcall(function()
							if  item.gen.productCode:find("^ZUHDENC") then 							
								Controls["ENC_Temp"][i].String = " N/A"							
								Controls["ENC_Data"][i].String = " "..item.videoStream.streamDatarate
							else
								Controls["ENC_Temp"][i].String = " "..item.temperature.main			
								--Add if > Max temp ->  Fill color yellow				
								Controls["ENC_Data"][i].String = " "..item.videoStream.streamDatarate
							end
						end)
						
						if not success then
							print(item.gen.name.. " has a product code of "..item.gen.productCode.. "\nError Code:" , result)
							Controls["ENC_Temp"][i].String = " N/A"	
							Controls["ENC_Data"][i].String = " 0Mbps"			
						end
						

						matchFound = true
						break -- Exit the inner loop if a match is found
					end
				end
				if not matchFound then
					newDeviceFound = true
					table.insert(newEncoders, name)
				end
			elseif type == "decoder" then
				for i = 1, Properties["Decoders"].Value do
					if Controls["DEC_Name"][i].String == name then
						--print("isit:"..rapidjson.encode(item, {pretty=true}))

						Controls["DEC_Uptime"][i].String = " "..item.gen.uptime
						Controls["DEC_Video_SRC"][i].String = " "..item.connectedEncoder.name
						Controls["DEC_Audio_SRC"][i].String = " "..item.connectedEncoderHdmiAudio.name

						local success, result = pcall(function()
							if item.gen.productCode:find("^ZUHDDEC")  then
								Controls["DEC_Temp"][i].String = " N/A"
							else
								Controls["DEC_Temp"][i].String = " " .. item.temperature.main
							end
						end)
						
						if not success then
							print(item.gen.name.. " has a product code of "..item.gen.productCode.. "\nError Code:" , result)
							Controls["ENC_Temp"][i].String = " N/A"		
						end
						
						if item.gen.state == "Up" then
							if item.hdmiOutput.cableConnected == "connected" then
								if item.connectedEncoder.name == "NA" then
									Controls["DEC_Connected"][i].Legend=rapidjson.encode(Status.Orange)
								else			
									Controls["DEC_Connected"][i].Legend=rapidjson.encode(Status.Green)
								end
							else
								Controls["DEC_Connected"][i].Legend=rapidjson.encode(Status.Yellow)
							end
						else
							Controls["DEC_Connected"][i].Legend=rapidjson.encode(Status.Red)
						end

						matchFound = true
						break -- Exit the inner loop if a match is found
					end
				end
				if not matchFound then
					newDeviceFound = true
					table.insert(newDecoders, name)
				end
			end
		end
	
		if newDeviceFound then
			ProcessNewDevice(newEncoders, newDecoders)
		end
	end
	

	function ProcessNewDevice(encoders, decoders)
		local newStatus = ""
		local decCount = #decoders
		local encCount = #encoders

		-- Process decoders
		for decIndex = 1, Properties["Decoders"].Value do
			if Controls["DEC_Name"][decIndex].String == "" and decCount > 0 then
				Controls["DEC_Name"][decIndex].String = table.remove(decoders, 1)
				decCount = #decoders
			end
		end
		
		-- Process encoders
		for encIndex = 1, Properties["Encoders"].Value do
			if Controls["ENC_Name"][encIndex].String == "" and encCount > 0 then
				Controls["ENC_Name"][encIndex].String = table.remove(encoders, 1)
				encCount = #encoders
			end
		end
	
		local encodersRemaining = #encoders 
		local decodersRemaining = #decoders 
		
		if encodersRemaining > 0 and decodersRemaining > 0 then
			-- Both encoders and decoders are greater than 0
			newStatus = string.format("You have %d more encoders and %d more decoders than configured, please set them to %d and %d respectively.", encodersRemaining, decodersRemaining, encodersRemaining + Properties["Encoders"].Value, decodersRemaining + Properties["Decoders"].Value)
		elseif encodersRemaining > 0 then
			-- Only encoders are greater than 0
			newStatus = string.format("You have %d more encoders than configured, please set them to %d.", encodersRemaining, encodersRemaining + Properties["Encoders"].Value)
		elseif decodersRemaining > 0 then
			-- Only decoders are greater than 0
			newStatus = string.format("You have %d more decoders than configured, please set them to %d.", decodersRemaining, decodersRemaining + Properties["Decoders"].Value)
		end
		
		Controls["Status"].Value = 4
		Controls["Status"].String = newStatus
	end
	

	function ProcessVideoWall(data)
		for _, wallData in ipairs(data.text) do
			local genInfo = wallData.gen
			if genInfo and genInfo.name then
				table.insert(videoWalls, genInfo.name)
			end
		end
	
		print("Video Walls found: " .. rapidjson.encode(videoWalls, {pretty=true}))
	end
	
	--== JSON Checks ==--
	
	function izitJSON(data)
		--print("testing -["..data.."]-")
		local success, result = pcall(rapidjson.decode, data)
		return success and type(result) == "table"
	end
	
	function izitVideoWall(data)
		return type(data) == "table" and data.command == "show videoWalls"
	end


	--== Sending to ZMP ==--

	function joinCommand(type)
		command = "join " .. encoder.String .." ".. decoder.String .. " "..type
		send(command)
	end

	function send(cmd)		
		print("To ZyperMP >>" .. cmd)
		if ZyperMP.IsConnected then
			ZyperMP:Write(cmd .. "\r\n")
		end
	end

	function ConfigGet()
		send("show device config all since " .. lastChangeConfig)
	end

	function StatusGet()
		send("show device status all since " .. lastChangeStatus)
	end

	function KeepItCorrect()
		send("show device status all")
		send("show device config all")
	end

	function Startup ()
		send("set terminal output json echo yes prompt yes")
		send("logging note QSC_Loaded")
		send("show device status all")
		send("show device config all")
		StatusTimer:Start(4)
		ConfigTimer:Start(6)
		ErrCorrectTimer:Start(20)
	end

	--==## ZyperMP SSH Connection ##==--


	function Connect()
		print("Connecting to ZMP")
		do
			if
				(not (Properties["IPAddress"].String == "")) and (not (Properties["Port"].String == "")) and
					(not (Properties["UserName"].String == "")) and
					(not (Properties["Password"].String == ""))
			 then
				local success, err =
					pcall(
					function()

						ZyperMP:Connect(
							Properties["IPAddress"].Value,
							Properties["Port"].Value,
							Properties["UserName"].Value,
							Properties["Password"].Value
						)
					end
				)
				if not success then
					Controls["Status"].Value = 2
					Controls["Status"].String = err
				end
			else
				Controls["Status"].Value = 2
				Controls["Status"].String = "Check SSH connection properties."
			end
		end
	end

	--== SSH mode handling ==--

	ZyperMPLoginFailedErrorFunctions = {}
	ZyperMPLoginFailedErrorFunctions["StandardLoginFailed"] = function(message)
		print("ZyperMP: " .. message)
		Controls["Status"].Value = 2
		Controls["Status"].String = message
	end
	ZyperMP.LoginFailed = function(connection, message)
		if message == nil then
			message = ""
		end
		for ZyperMP_i, ZyperMP_logFailedFun in pairs(ZyperMPLoginFailedErrorFunctions) do
			ZyperMP_logFailedFun("LOGIN FAILED " .. message)
		end
	end
	ZyperMPStatusConnectedFunctions = {}
	ZyperMPStatusConnectedFunctions["StandardConnected"] = function()
		Controls["Status"].Value = 0
		Controls["Status"].String = ""
	end
	ZyperMPStatusClosedFunctions = {}
	ZyperMPStatusClosedFunctions["StandardClosed"] = function()
		Controls["Status"].Value = 2
		Controls["Status"].String = "Closed"
	end
	ZyperMP.Connected = function()
		for ZyperMP_i, ZyperMP_confun in pairs(ZyperMPStatusConnectedFunctions) do
			ZyperMP_confun()			

			Timer.CallAfter(Startup,10)
		end
	end
	ZyperMP.Closed = function()
		for ZyperMP_i, ZyperMP_clofun in pairs(ZyperMPStatusClosedFunctions) do
			ZyperMP_clofun()
		end
	end
	ZyperMP.Reconnect = function()
		Controls["Status"].Value = 5
		Controls["Status"].String = "Reconnect"
	end
	ZyperMP.Timeout = function()
		Controls["Status"].Value = 2
		Controls["Status"].String = "Timeout"
	end
	ZyperMPConnectionErrorFunctions = {}
	ZyperMPConnectionErrorFunctions["StandardError"] = function(error_message)
		Controls["Status"].Value = 2
		Controls["Status"].String = error_message
	end
	ZyperMP.Error = function(connection, error_message)
		if error_message == nil then
			error_message = ""
		end
		for ZyperMP_i, ZyperMP_errfun in pairs(ZyperMPConnectionErrorFunctions) do
			ZyperMP_errfun(error_message)
		end
	end



	-- Gui Functions --

	function makeItRed()
		for encoderIndex = 1, Properties["Encoders"].Value do 
			Controls["ENC_Connected"][encoderIndex].Legend=rapidjson.encode(Status.Red)
		end
		for decoderIndex = 1, Properties["Decoders"].Value do 
			Controls["DEC_Connected"][decoderIndex].Legend=rapidjson.encode(Status.Red)
		end
	end


	-- Event Handlers --
	btnCommand.EventHandler = function() send(command.String) end --command.String
	
	btnJoinVideo.EventHandler = function() joinCommand("fastSwitched") end --command.String
	btnJoinUSB.EventHandler = function() joinCommand("usb") end --command.String
	btnJoinAnalog.EventHandler = function() joinCommand("analogAudio") end --command.String
	btnJoinDigital.EventHandler = function() joinCommand("hdmiAudio") end --command.String


	function Init()
		print("Init")
		ip.String = Properties["IPAddress"].Value
		port.String = Properties["Port"].Value

		makeItRed()
		Connect()
		ControlSetup()
		
		BufferTimer.EventHandler = ParseResponse
		StatusTimer.EventHandler = StatusGet
		ConfigTimer.EventHandler = ConfigGet
		ErrCorrectTimer.EventHandler = KeepItCorrect
	end

	Init()
end
